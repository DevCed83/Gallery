Django Tutorial
from : 
https://www.youtube.com/watch?v=e1IyzVyrLSU
secondary source : https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Introduction


///////////////////////////////////////////////////////////////////
///////////                                             ///////////
///////////				Creation d'un site				///////////		   
///////////                                             ///////////
///////////////////////////////////////////////////////////////////

installer python
naviguer vers son dossier racine  de projet	
installer pipenv 
	pip install pipenv
creer un environement virtuel (env)
	pipenv shell
installer django dans l'env
	pipenv install django

Demarrer un projet django (un projet = un site, une app = une fonctionnalité du site)
	django-admin startproject <nom_du_projet>
  ici :
	django-admin startproject mon_site

présentation des fichiers du projet <nom_du_projet>: 
cf diagramme @ MDN 
	settings.py:
		reglages du projet : comprends les app installées et utilisées par le projet,
		les middlewares, les infos sur les systemes de base de données, le chemin de la racine du projet ...

	urls : les routes de vers chaque app du projet (les apps ont aussi leur fichier urls.py)

naviguer dans le dossier <nom_du_projet>
	cd chemin/vers/projet/

Initialiser la base de données avec les données de projet par défaut
	python manage.py migrate

Lancer le serveur 
	python manage.py runserver

verifer dans le navigateur sur localhost (avec le port correspondant si nécessaire)


////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
/////////////////////////Creation d'une app/////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////


dans le dossier racine du projet django (le site)
créer une app 
	python manage.py startapp <nom_de_l_app>
  ici : 
  	python manage.py startapp create_account

présentation des fichiers générés: 
	models.py : contient la représentation sous forme de classe python des concepts stockés dans la base de données. (ndlr : pour cqrs, stockage des structures de données command, event, state, query, reply ?) 


	